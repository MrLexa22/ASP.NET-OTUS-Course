name: .NET CI/CD with Docker Support

on:
  push:
    branches: [ main, develop, homework4-docker ]
  pull_request:
    branches: [ main, develop ]

env:
  DOTNET_VERSION: '8.0.x'
  DOCKER_REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}/promocodefactory

jobs:
  unit-tests:
    name: Unit Tests (.NET)
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}
        
    - name: Restore dependencies
      run: dotnet restore PromoCodeFactory.sln
      working-directory: ./Homeworks/UnitTests/src
      
    - name: Build
      run: dotnet build PromoCodeFactory.sln --no-restore --configuration Release
      working-directory: ./Homeworks/UnitTests/src
      
    - name: Run unit tests
      run: dotnet test PromoCodeFactory.sln --no-build --configuration Release --verbosity normal --collect:"XPlat Code Coverage" --logger trx --results-directory ./TestResults
      working-directory: ./Homeworks/UnitTests/src
      
    - name: Upload test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: unit-test-results
        path: '**/TestResults/**/*'

  docker-integration-tests:
    name: Docker Integration Tests
    runs-on: ubuntu-latest
    needs: unit-tests
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Run Docker Compose Integration Tests
      run: |
        cd ./Homeworks/UnitTests/src
        
        # Используем существующий docker-compose.yml как основу
        cp docker-compose.yml docker-compose.test.yml
        
        # Заменяем пароль на тестовый
        sed -i 's/password123/test_password/g' docker-compose.test.yml
        
        # Запускаем сервисы
        echo "Building and starting services..."
        docker-compose -f docker-compose.test.yml up -d --build
        
        # Ждем готовности сервисов
        echo "Waiting for services to be ready..."
        sleep 120
        
        # Проверяем статус контейнеров
        echo "Checking container status..."
        docker-compose -f docker-compose.test.yml ps
        
        # Тестируем API endpoints
        echo "Testing API endpoints..."
        
        # Health check с retry
        for i in {1..10}; do
          if curl -f http://localhost:5000/swagger/index.html; then
            echo "Swagger endpoint is accessible"
            break
          else
            echo "Attempt $i failed, retrying in 10 seconds..."
            sleep 10
          fi
        done
        
        # Test API endpoints
        curl -f http://localhost:5000/api/v1/employees || echo "Employees endpoint test"
        curl -f http://localhost:5000/api/v1/roles || echo "Roles endpoint test"
        curl -f http://localhost:5000/api/v1/promocodes || echo "Promocodes endpoint test"
        
    - name: Show logs on failure
      if: failure()
      run: |
        cd ./Homeworks/UnitTests/src
        echo "=== Container Status ==="
        docker-compose -f docker-compose.test.yml ps
        echo "=== Application Logs ==="
        docker-compose -f docker-compose.test.yml logs promocodefactory.webhost
        echo "=== Database Logs ==="
        docker-compose -f docker-compose.test.yml logs postgres
        
    - name: Cleanup
      if: always()
      run: |
        cd ./Homeworks/UnitTests/src
        docker-compose -f docker-compose.test.yml down -v

  build-and-push:
    name: Build & Push Docker Images  
    runs-on: ubuntu-latest
    needs: [unit-tests, docker-integration-tests]
    if: github.event_name == 'push'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.DOCKER_REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
        
    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.DOCKER_REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}
          
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: ./Homeworks/UnitTests/src
        file: ./Homeworks/UnitTests/src/PromoCodeFactory.WebHost/Dockerfile
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        
  ci-cd-summary:
    name: CI/CD Summary
    runs-on: ubuntu-latest
    needs: [unit-tests, docker-integration-tests, build-and-push]
    if: always()
    
    steps:
    - name: Summary
      run: |
        echo "## CI/CD Pipeline Summary" >> $GITHUB_STEP_SUMMARY
        echo "| Job | Status |" >> $GITHUB_STEP_SUMMARY
        echo "| --- | --- |" >> $GITHUB_STEP_SUMMARY
        echo "| Unit Tests | ${{ needs.unit-tests.result }} |" >> $GITHUB_STEP_SUMMARY
        echo "| Docker Integration Tests | ${{ needs.docker-integration-tests.result }} |" >> $GITHUB_STEP_SUMMARY
        echo "| Build and Push | ${{ needs.build-and-push.result }} |" >> $GITHUB_STEP_SUMMARY
