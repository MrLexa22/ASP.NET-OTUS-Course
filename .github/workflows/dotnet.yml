name: .NET CI/CD with Docker Support

on:
  push:
    branches: [ main, develop, homework4-docker ]
  pull_request:
    branches: [ main, develop ]

env:
  DOTNET_VERSION: '8.0.x'
  DOCKER_REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}/promocodefactory

jobs:
  # Unit Tests without Docker
  unit-tests:
    name: Unit Tests (.NET)
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}
        
    - name: Restore dependencies
      run: dotnet restore
      working-directory: ./Homeworks/UnitTests/src
      
    - name: Build
      run: dotnet build --no-restore --configuration Release
      working-directory: ./Homeworks/UnitTests/src
      
    - name: Run unit tests
      run: dotnet test --no-build --configuration Release --verbosity normal --collect:"XPlat Code Coverage" --logger trx --results-directory ./TestResults
      working-directory: ./Homeworks/UnitTests/src
      
    - name: Upload test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: unit-test-results
        path: '**/TestResults/**/*'
        
    - name: Upload coverage reports
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: coverage-reports
        path: '**/TestResults/**/coverage.cobertura.xml'

  # Docker Integration Tests
  docker-integration-tests:
    name: Docker Integration Tests
    runs-on: ubuntu-latest
    needs: unit-tests
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Run Docker Compose Integration Tests
      run: |
        cd ./Homeworks/UnitTests/src
        
        # Создаем тестовый docker-compose файл
        cat > docker-compose.test.yml << 'EOF'
        services:
          promocodefactory.webhost:
            build:
              context: .
              dockerfile: PromoCodeFactory.WebHost/Dockerfile
            environment:
              - ConnectionStrings__PromoCodeFactoryDb=Host=postgres;Database=promocode_factory_db;Username=postgres;Password=test_password;Port=5432
              - ASPNETCORE_ENVIRONMENT=Development
            depends_on:
              postgres:
                condition: service_healthy
            networks:
              - test-network
            ports:
              - "8080:8080"

          postgres:
            image: postgres:15
            environment:
              POSTGRES_DB: promocode_factory_db
              POSTGRES_USER: postgres
              POSTGRES_PASSWORD: test_password
            networks:
              - test-network
            healthcheck:
              test: ["CMD-SHELL", "pg_isready -U postgres -d promocode_factory_db"]
              interval: 10s
              timeout: 5s
              retries: 5

        networks:
          test-network:
            driver: bridge
        EOF
        
        # Запускаем сервисы
        docker-compose -f docker-compose.test.yml up -d --build
        
        # Ждем готовности сервисов
        echo "Waiting for services to be ready..."
        sleep 90
        
        # Проверяем статус контейнеров
        docker-compose -f docker-compose.test.yml ps
        
        # Тестируем API endpoints
        echo "Testing API endpoints..."
        
        # Health check
        curl -f http://localhost:8080/swagger/index.html
        
        # Test API endpoints
        curl -f http://localhost:8080/api/v1/employees
        curl -f http://localhost:8080/api/v1/roles
        curl -f http://localhost:8080/api/v1/promocodes
        
        echo "All integration tests passed!"
        
    - name: Show logs on failure
      if: failure()
      run: |
        cd ./Homeworks/UnitTests/src
        echo "=== Application Logs ==="
        docker-compose -f docker-compose.test.yml logs promocodefactory.webhost
        echo "=== Database Logs ==="
        docker-compose -f docker-compose.test.yml logs postgres
        
    - name: Cleanup
      if: always()
      run: |
        cd ./Homeworks/UnitTests/src
        docker-compose -f docker-compose.test.yml down -v

  # Build and Push Docker Images
  build-and-push:
    name: Build & Push Docker Images
    runs-on: ubuntu-latest
    needs: [unit-tests, docker-integration-tests]
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop' || github.ref == 'refs/heads/homework4-docker')
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.DOCKER_REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
        
    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.DOCKER_REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}
          
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: ./Homeworks/UnitTests/src
        file: ./Homeworks/UnitTests/src/PromoCodeFactory.WebHost/Dockerfile
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        platforms: linux/amd64
        
    - name: Image digest
      run: echo ${{ steps.build.outputs.digest }}

  # Deploy to Staging
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: build-and-push
    if: github.ref == 'refs/heads/develop'
    environment: staging
    
    steps:
    - name: Deploy to staging environment
      run: |
        echo "Deploying image: ${{ env.DOCKER_REGISTRY }}/${{ env.IMAGE_NAME }}:develop"
        echo "This is where staging deployment logic would go"
        # Здесь будет код для развертывания в staging среду
        
  # Deploy to Production
  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: build-and-push
    if: github.ref == 'refs/heads/main'
    environment: production
    
    steps:
    - name: Deploy to production environment
      run: |
        echo "Deploying image: ${{ env.DOCKER_REGISTRY }}/${{ env.IMAGE_NAME }}:latest"
        echo "This is where production deployment logic would go"
        # Здесь будет код для развертывания в production среду

  # Summary Job
  ci-cd-summary:
    name: CI/CD Summary
    runs-on: ubuntu-latest
    needs: [unit-tests, docker-integration-tests, build-and-push]
    if: always()
    
    steps:
    - name: Summary
      run: |
        echo "## CI/CD Pipeline Summary" >> $GITHUB_STEP_SUMMARY
        echo "| Job | Status |" >> $GITHUB_STEP_SUMMARY
        echo "| --- | --- |" >> $GITHUB_STEP_SUMMARY
        echo "| Unit Tests | ${{ needs.unit-tests.result }} |" >> $GITHUB_STEP_SUMMARY
        echo "| Docker Integration Tests | ${{ needs.docker-integration-tests.result }} |" >> $GITHUB_STEP_SUMMARY
        echo "| Build and Push | ${{ needs.build-and-push.result }} |" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "**Branch:** ${{ github.ref_name }}" >> $GITHUB_STEP_SUMMARY
        echo "**Commit:** ${{ github.sha }}" >> $GITHUB_STEP_SUMMARY
